<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/events/cloud/audit/v1/data.proto

namespace Google\Events\Cloud\Audit\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The data within all Cloud Audit Logs log entry events.
 *
 * Generated from protobuf message <code>google.events.cloud.audit.v1.LogEntryData</code>
 */
class LogEntryData extends \Google\Protobuf\Internal\Message
{
    /**
     * The resource name of the log to which this log entry belongs.
     *
     * Generated from protobuf field <code>string log_name = 12;</code>
     */
    protected $log_name = '';
    /**
     * The monitored resource that produced this log entry.
     * Example: a log entry that reports a database error would be associated with
     * the monitored resource designating the particular database that reported
     * the error.
     *
     * Generated from protobuf field <code>.google.api.MonitoredResource resource = 8;</code>
     */
    protected $resource = null;
    /**
     * The log entry payload, which is always an AuditLog for Cloud Audit Log events.
     *
     * Generated from protobuf field <code>.google.events.cloud.audit.v1.AuditLog proto_payload = 2;</code>
     */
    protected $proto_payload = null;
    /**
     * A unique identifier for the log entry. 
     *
     * Generated from protobuf field <code>string insert_id = 4;</code>
     */
    protected $insert_id = '';
    /**
     * A set of user-defined (key, value) data that provides additional
     * information about the log entry.
     *
     * Generated from protobuf field <code>map<string, string> labels = 11;</code>
     */
    private $labels;
    /**
     * Information about an operation associated with the log entry, if applicable.
     *
     * Generated from protobuf field <code>.google.events.cloud.audit.v1.LogEntryOperation operation = 15;</code>
     */
    protected $operation = null;
    /**
     * The time the event described by the log entry occurred.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp timestamp = 9;</code>
     */
    protected $timestamp = null;
    /**
     * The time the log entry was received by Logging.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp receive_timestamp = 24;</code>
     */
    protected $receive_timestamp = null;
    /**
     * The severity of the log entry.
     *
     * Generated from protobuf field <code>.google.events.cloud.audit.v1.LogSeverity severity = 10;</code>
     */
    protected $severity = 0;
    /**
     * Resource name of the trace associated with the log entry, if any. If it
     * contains a relative resource name, the name is assumed to be relative to
     * `//tracing.googleapis.com`. Example:
     * `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`
     *
     * Generated from protobuf field <code>string trace = 22;</code>
     */
    protected $trace = '';
    /**
     * The span ID within the trace associated with the log entry, if any.
     * For Trace spans, this is the same format that the Trace API v2 uses: a
     * 16-character hexadecimal encoding of an 8-byte array, such as
     * `000000000000004a`.
     *
     * Generated from protobuf field <code>string span_id = 27;</code>
     */
    protected $span_id = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $log_name
     *           The resource name of the log to which this log entry belongs.
     *     @type \Google\Api\MonitoredResource $resource
     *           The monitored resource that produced this log entry.
     *           Example: a log entry that reports a database error would be associated with
     *           the monitored resource designating the particular database that reported
     *           the error.
     *     @type \Google\Events\Cloud\Audit\V1\AuditLog $proto_payload
     *           The log entry payload, which is always an AuditLog for Cloud Audit Log events.
     *     @type string $insert_id
     *           A unique identifier for the log entry. 
     *     @type array|\Google\Protobuf\Internal\MapField $labels
     *           A set of user-defined (key, value) data that provides additional
     *           information about the log entry.
     *     @type \Google\Events\Cloud\Audit\V1\LogEntryOperation $operation
     *           Information about an operation associated with the log entry, if applicable.
     *     @type \Google\Protobuf\Timestamp $timestamp
     *           The time the event described by the log entry occurred.
     *     @type \Google\Protobuf\Timestamp $receive_timestamp
     *           The time the log entry was received by Logging.
     *     @type int $severity
     *           The severity of the log entry.
     *     @type string $trace
     *           Resource name of the trace associated with the log entry, if any. If it
     *           contains a relative resource name, the name is assumed to be relative to
     *           `//tracing.googleapis.com`. Example:
     *           `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`
     *     @type string $span_id
     *           The span ID within the trace associated with the log entry, if any.
     *           For Trace spans, this is the same format that the Trace API v2 uses: a
     *           16-character hexadecimal encoding of an 8-byte array, such as
     *           `000000000000004a`.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Events\Cloud\Audit\V1\Data::initOnce();
        parent::__construct($data);
    }

    /**
     * The resource name of the log to which this log entry belongs.
     *
     * Generated from protobuf field <code>string log_name = 12;</code>
     * @return string
     */
    public function getLogName()
    {
        return $this->log_name;
    }

    /**
     * The resource name of the log to which this log entry belongs.
     *
     * Generated from protobuf field <code>string log_name = 12;</code>
     * @param string $var
     * @return $this
     */
    public function setLogName($var)
    {
        GPBUtil::checkString($var, True);
        $this->log_name = $var;

        return $this;
    }

    /**
     * The monitored resource that produced this log entry.
     * Example: a log entry that reports a database error would be associated with
     * the monitored resource designating the particular database that reported
     * the error.
     *
     * Generated from protobuf field <code>.google.api.MonitoredResource resource = 8;</code>
     * @return \Google\Api\MonitoredResource
     */
    public function getResource()
    {
        return $this->resource;
    }

    /**
     * The monitored resource that produced this log entry.
     * Example: a log entry that reports a database error would be associated with
     * the monitored resource designating the particular database that reported
     * the error.
     *
     * Generated from protobuf field <code>.google.api.MonitoredResource resource = 8;</code>
     * @param \Google\Api\MonitoredResource $var
     * @return $this
     */
    public function setResource($var)
    {
        GPBUtil::checkMessage($var, \Google\Api\MonitoredResource::class);
        $this->resource = $var;

        return $this;
    }

    /**
     * The log entry payload, which is always an AuditLog for Cloud Audit Log events.
     *
     * Generated from protobuf field <code>.google.events.cloud.audit.v1.AuditLog proto_payload = 2;</code>
     * @return \Google\Events\Cloud\Audit\V1\AuditLog
     */
    public function getProtoPayload()
    {
        return $this->proto_payload;
    }

    /**
     * The log entry payload, which is always an AuditLog for Cloud Audit Log events.
     *
     * Generated from protobuf field <code>.google.events.cloud.audit.v1.AuditLog proto_payload = 2;</code>
     * @param \Google\Events\Cloud\Audit\V1\AuditLog $var
     * @return $this
     */
    public function setProtoPayload($var)
    {
        GPBUtil::checkMessage($var, \Google\Events\Cloud\Audit\V1\AuditLog::class);
        $this->proto_payload = $var;

        return $this;
    }

    /**
     * A unique identifier for the log entry. 
     *
     * Generated from protobuf field <code>string insert_id = 4;</code>
     * @return string
     */
    public function getInsertId()
    {
        return $this->insert_id;
    }

    /**
     * A unique identifier for the log entry. 
     *
     * Generated from protobuf field <code>string insert_id = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setInsertId($var)
    {
        GPBUtil::checkString($var, True);
        $this->insert_id = $var;

        return $this;
    }

    /**
     * A set of user-defined (key, value) data that provides additional
     * information about the log entry.
     *
     * Generated from protobuf field <code>map<string, string> labels = 11;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getLabels()
    {
        return $this->labels;
    }

    /**
     * A set of user-defined (key, value) data that provides additional
     * information about the log entry.
     *
     * Generated from protobuf field <code>map<string, string> labels = 11;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setLabels($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->labels = $arr;

        return $this;
    }

    /**
     * Information about an operation associated with the log entry, if applicable.
     *
     * Generated from protobuf field <code>.google.events.cloud.audit.v1.LogEntryOperation operation = 15;</code>
     * @return \Google\Events\Cloud\Audit\V1\LogEntryOperation
     */
    public function getOperation()
    {
        return $this->operation;
    }

    /**
     * Information about an operation associated with the log entry, if applicable.
     *
     * Generated from protobuf field <code>.google.events.cloud.audit.v1.LogEntryOperation operation = 15;</code>
     * @param \Google\Events\Cloud\Audit\V1\LogEntryOperation $var
     * @return $this
     */
    public function setOperation($var)
    {
        GPBUtil::checkMessage($var, \Google\Events\Cloud\Audit\V1\LogEntryOperation::class);
        $this->operation = $var;

        return $this;
    }

    /**
     * The time the event described by the log entry occurred.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp timestamp = 9;</code>
     * @return \Google\Protobuf\Timestamp
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * The time the event described by the log entry occurred.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp timestamp = 9;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->timestamp = $var;

        return $this;
    }

    /**
     * The time the log entry was received by Logging.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp receive_timestamp = 24;</code>
     * @return \Google\Protobuf\Timestamp
     */
    public function getReceiveTimestamp()
    {
        return $this->receive_timestamp;
    }

    /**
     * The time the log entry was received by Logging.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp receive_timestamp = 24;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setReceiveTimestamp($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->receive_timestamp = $var;

        return $this;
    }

    /**
     * The severity of the log entry.
     *
     * Generated from protobuf field <code>.google.events.cloud.audit.v1.LogSeverity severity = 10;</code>
     * @return int
     */
    public function getSeverity()
    {
        return $this->severity;
    }

    /**
     * The severity of the log entry.
     *
     * Generated from protobuf field <code>.google.events.cloud.audit.v1.LogSeverity severity = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setSeverity($var)
    {
        GPBUtil::checkEnum($var, \Google\Events\Cloud\Audit\V1\LogSeverity::class);
        $this->severity = $var;

        return $this;
    }

    /**
     * Resource name of the trace associated with the log entry, if any. If it
     * contains a relative resource name, the name is assumed to be relative to
     * `//tracing.googleapis.com`. Example:
     * `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`
     *
     * Generated from protobuf field <code>string trace = 22;</code>
     * @return string
     */
    public function getTrace()
    {
        return $this->trace;
    }

    /**
     * Resource name of the trace associated with the log entry, if any. If it
     * contains a relative resource name, the name is assumed to be relative to
     * `//tracing.googleapis.com`. Example:
     * `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`
     *
     * Generated from protobuf field <code>string trace = 22;</code>
     * @param string $var
     * @return $this
     */
    public function setTrace($var)
    {
        GPBUtil::checkString($var, True);
        $this->trace = $var;

        return $this;
    }

    /**
     * The span ID within the trace associated with the log entry, if any.
     * For Trace spans, this is the same format that the Trace API v2 uses: a
     * 16-character hexadecimal encoding of an 8-byte array, such as
     * `000000000000004a`.
     *
     * Generated from protobuf field <code>string span_id = 27;</code>
     * @return string
     */
    public function getSpanId()
    {
        return $this->span_id;
    }

    /**
     * The span ID within the trace associated with the log entry, if any.
     * For Trace spans, this is the same format that the Trace API v2 uses: a
     * 16-character hexadecimal encoding of an 8-byte array, such as
     * `000000000000004a`.
     *
     * Generated from protobuf field <code>string span_id = 27;</code>
     * @param string $var
     * @return $this
     */
    public function setSpanId($var)
    {
        GPBUtil::checkString($var, True);
        $this->span_id = $var;

        return $this;
    }

}

